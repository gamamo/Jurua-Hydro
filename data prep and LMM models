
# Jurua analyses
# this script will be used to run the analyses of the Jurua top-hydro paper
# owner: Gabriel Massaine Moulatlet
# contact: gamamo@utu.fi


# load the relevant packages

library(pipeR)
library(vegan)
library(ggplot2)
library(lme4)
library(plyr)
library(dplyr)
library(nlme)
#library(effects)
library(car)
#library(pROC)
library(mvpart)
#library(rioja)
#library(palaeoSig)
library(rpart)
library(visreg)
#library(gamlss)
library(raster)
library(sp)
library(rgdal)
library(sjPlot)
#library(coefplot)
library(VennDiagram)
library(reshape2)
library(venneuler)
library(gridExtra)
library(pbkrtest)
library(mgcv)
library(voxel)
library(ggpubr)
library(ggrepel)
library(glmmTMB)
#library(MVPARTwrap)
library(rpart.plot)
library(DHARMa)
library(pscl)
library(AICcmodavg)
library(lmerTest)
library(dotwhisker)
library(MuMIn)
library(pscl)
library(DescTools)
library(RColorBrewer)
library(tidyr)
library(patchwork)
library(ape)
library(partR2)




# this script starts with the preparation of table that gets the relative elevational of the transects in each
# geological formation, then come the graphics that relate environment and species

###################################### load the environmental data ####

rm(list = ls())

getwd()
#setwd("C:/workspace_Gabriel_Moulatlet/Hidrologia do jurua/Analyses/dados ambientais originais")
#setwd("F:/workspace gabriel/Hidrologia do jurua/Analyses/dados ambientais originais")
#setwd("C:/Users/gabri/Dropbox/hidrologia do jurua/Analyses/dados ambientais originais")s
setwd("C:/Users/gabri/Dropbox/papers/projetos/JuruaHydropaper/hidrologia do jurua/Analyses/dados ambientais originais")
dir()



#load GEO list
geoID <- read.csv("geoID.csv", stringsAsFactors = FALSE)
geoID[which(geoID$surface == "Terrace"), "surface"] <-
  "River terraces"
geoID[which(geoID$surface == "Pebas"), "surface"] <-
  "Solimões formation"
geoID[which(geoID$surface == "Hills"), "surface"] <-
  "Içá formation"
colnames(geoID)[1:2] <- c("trname", "tr")

#load solos
solo  <-
  read.csv("soil_results_GMM_v3_forR.csv", stringsAsFactors = F)
colnames(solo)[2:3] <- c("TrNumber", "subunit")

#solo, from 1:100 to 1:20
newsubunitnamesolo <-
  matrix(seq(1, 100), ncol = 20) # create a matrix with numbers to be related

#run the replace looping
for (i in seq(1, 20)) {
  solo$subunit[which(solo$subunit %in% newsubunitnamesolo[, i])] <- i
}

#load the topography data
topography <-
  read.csv(
    "topography.csv",
    header = TRUE,
    sep = ",",
    dec = ".",
    na.strings = NA
  )
head(topography)

#identify which transects do not have topo measurments
topography[which(topography$sub == 0 &
                   topography$topo == 0), ]
# transects 780,794,806,807,808 need to be discarted
ex <- c(780, 794, 806, 807, 808)

topography <- topography[!topography$tr %in% ex, ]

dist <- c(1:20 * 25)

#interpolate the topography to each 25 m
listtopointerpolation <- list()
for (k in unique(topography$tr)) {
  topo_sel <- subset(topography, topography$tr == k)
  topoapprox <-
    approx(topo_sel$sub, topo_sel$topo, dist)
  
  matrixtopo <-
    matrix(NA, ncol = 3, nrow = length(topoapprox$y))
  matrixtopo[, 1] <- topoapprox$y
  matrixtopo[, 2] <-
    rep(k, times = length(topoapprox$y))
  matrixtopo[, 3] <- rep(1:20)
  numerator <- which(unique(topography$tr) == k)
  listtopointerpolation[[numerator]] <- matrixtopo
}

topo_sel <- ldply(listtopointerpolation, data.frame)

colnames(topo_sel) <- c("topo", "trnumber", "sub")

#setwd("C:/workspace gabriel/hidrologia do jurua/camilo R script june 2017")
#setwd("F:/workspace gabriel/Hidrologia do jurua/camilo R script june 2017")
#setwd("C:/workspace_Gabriel_Moulatlet/Hidrologia do jurua/camilo R script june 2017")
setwd("C:/Users/gabri/Dropbox/papers/projetos/JuruaHydropaper/hidrologia do jurua/camilo R script june 2017")


dir()
SRTM <- raster("SRTM_JURUA_1arc_rec.tif")

#Load the bilinear extractions made in R by Camilo
hand53_ream_m0 <-
  read.csv("transect_adjust_m0_ream_hand.csv", sep = ";")
head(hand53_ream_m0)
hand53_ream_m0$sub <-
  rep(seq(1:20), length(unique(hand53_ream_m0$tr)))
hand53_ream_01 <-
  read.csv("transect_adjust_01_ream_hand.csv", sep = ";")
head(hand53_ream_01)

#coordinates(hand53_ream_m0) <- c("lat","lon")
srtm_alt <- raster::extract(SRTM,cbind(hand53_ream_m0$lon,hand53_ream_m0$lat),method="bilinear")
hand53_ream_m0 <- cbind(hand53_ream_m0,srtm_alt)
rm(SRTM)

################################# prepare envi table ####

tr <- seq(738, 808)
envi <- list()
for (i in unique(tr)) {
  envi[[i]] <- rep(i, times = 20)
}
envi <- ldply(envi, data.frame)
colnames(envi) <- "tr"

envi$sub <- NA
envi$LOI <- NA
envi$pH  <- NA
envi$Ca  <- NA
envi$K   <- NA
envi$Mg  <- NA
envi$Na  <- NA
envi$sum_of_basis <- NA
envi$Al  <- NA
envi$P   <- NA
envi$surface <- NA
envi$topo <- NA
envi$lon <- NA
envi$lat  <- NA
envi$hand <- NA
envi$area_c <- NA
envi$decli <- NA
envi$drain <- NA
envi$max_drain <- NA
envi$soloslinearint <- NA
envi$solostopoint <- NA
envi$srtm_alt    <- NA

#assign sub information
for (i in unique(envi$tr)) {
  envi[envi$tr == i, "sub"] <- seq(1:20)
}



#associate soil properties to envi
for (i in unique(envi$tr)) {
  for (g in unique(envi$sub)) {
    if (nrow(solo[solo$TrNumber == i & solo$subunit == g, ]) > 0) {
      envi[envi$tr == i & envi$sub == g,
           c("LOI",
             "pH",
             "Ca",
             "K",
             "Mg",
             "Na",
             "sum_of_basis",
             "Al",
             "P")] <- solo[solo$TrNumber == i & solo$subunit == g,
                           c("LOI",
                             "pH",
                             "Ca",
                             "K",
                             "Mg",
                             "Na",
                             "sum_of_basis",
                             "Al",
                             "P")]
    } else{
      envi[envi$tr == i &
             envi$sub == g, c("LOI",
                              "pH",
                              "Ca",
                              "K",
                              "Mg",
                              "Na",
                              "sum_of_basis",
                              "Al",
                              "P")] <- NA
    }
  }
}

# interpolated sum of basis
listsolointerpolation <- list()
for (i in unique(solo$TrNumber)) {
  solo_sel <- subset(solo, solo$TrNumber == i)
  soloapprox <-
    approx(
      solo_sel$subunit * 25,
      solo_sel$sum_of_basis,
      dist,
      method = "linear",
      rule = 2
    )
  soloapprox2 <-
    spline(solo_sel$subunit * 25,
           solo_sel$sum_of_basis,
           xout = topo_sel[topo_sel$trnumber == k, "topo"],
           method = "natural")
  
  matrixsolo <-
    matrix(NA, ncol = 4, nrow = length(soloapprox$y))
  matrixsolo[, 1] <- soloapprox$y
  matrixsolo[, 2] <- soloapprox2$y
  matrixsolo[, 3] <- rep(i, times = length(soloapprox$y))
  matrixsolo[, 4] <- rep(1:20)
  numerator <- which(unique(solo$TrNumber) == i)
  listsolointerpolation[[numerator]] <- matrixsolo
}
unlistsolos <- ldply(listsolointerpolation, data.frame)
colnames(unlistsolos) <-
  c("soloslinearint", "solostopoint", "trnumber", "sub")


for (i in unique(unlistsolos$trnumber)) {
  envi[envi$tr == i, "soloslinearint"] <-
    unlistsolos[unlistsolos$trnumber == i, "soloslinearint"]
  envi[envi$tr == i, "solostopoint"] <-
    unlistsolos[unlistsolos$trnumber == i, "solostopoint"]
}

#associate geo surface info to envi
for (i in unique(envi$tr)) {
  envi[envi$tr == i, "surface"] <- geoID[geoID$tr == i, "surface"]
}

#associate topo to envi
for (i in unique(topo_sel$trnumber)) {
  envi[envi$tr == i, "topo"] <- topo_sel[topo_sel$trnumber == i, "topo"]
}

#associate hand data
for (i in unique(hand53_ream_m0$tr)) {
  envi[envi$tr == i, c("lon",
                       "lat",
                       "hand",
                       "area_c",
                       "decli",
                       "drain",
                       "max_drain",
                       "srtm_alt")] <- hand53_ream_m0[hand53_ream_m0$tr == i,
                                                      c("lon",
                                                        "lat",
                                                        "hand",
                                                        "area_c",
                                                        "decli",
                                                        "drain",
                                                        "max_drain",
                                                        "srtm_alt")]
}


#associate Truni info
envi$Truni <-
  as.numeric(paste(envi$tr, envi$sub, sep = ""))

#colnames change
colnames(envi)[1:2] <- c("TrNumber", "subunit")

#transects to exclude ####
#if(F){
  toexclude <- as.factor(c(780, 794, 806, 807, 808))
   # as.factor(c(743, 742, 745, 764, 765, 770, 775, 784, 785, 805))
  trvector <- as.factor(envi$TrNumber) 
  trvector <- trvector[!trvector %in% toexclude]
  trvector  <- as.numeric(as.vector(unique(trvector)))
  
  envi <- envi[envi$TrNumber %in% trvector, ]
#}

# end of envi table preparition

################################################# table 1: relative elevation differences per geological formations ####

# subset transects per geological formations
solimoes <-
  envi[which(envi$surface == "Solimões formation"), "TrNumber"]
ica      <-
  envi[which(envi$surface == "Içá formation"), "TrNumber"]
terraces <-
  envi[which(envi$surface == "River terraces"), "TrNumber"]
geolist  <-
  list(ica, solimoes, terraces) # this list is important for the loops below

statsminmax <- data.frame (
  aggregate(envi$topo, list(envi$TrNumber), min)[, 1:2],
  aggregate(envi$topo, list(envi$TrNumber), max)[, -1],
  aggregate(envi$topo, list(envi$TrNumber), mean)[, -1],
  aggregate(envi$hand, list(envi$TrNumber), min)[, -1],
  aggregate(envi$hand, list(envi$TrNumber), max)[, -1],
  aggregate(envi$hand, list(envi$TrNumber), mean)[, -1],
  aggregate(envi$sum_of_basis, list(envi$TrNumber), min , na.rm =
              TRUE)[, -1],
  aggregate(envi$sum_of_basis, list(envi$TrNumber), max , na.rm =
              TRUE)[, -1],
  aggregate(envi$sum_of_basis, list(envi$TrNumber), mean, na.rm =
              TRUE)[, -1],
  aggregate(envi$decli, list(envi$TrNumber), min)[, -1],
  aggregate(envi$decli, list(envi$TrNumber), max)[, -1],
  aggregate(envi$decli, list(envi$TrNumber), mean)[, -1],
  aggregate(envi$srtm_alt, list(envi$TrNumber), min)[, -1],
  aggregate(envi$srtm_alt, list(envi$TrNumber), max)[, -1],
  aggregate(envi$srtm_alt, list(envi$TrNumber), mean)[, -1],
  aggregate(envi$soloslinearint, list(envi$TrNumber), min)[, -1],
  aggregate(envi$soloslinearint, list(envi$TrNumber), max)[, -1],
  aggregate(envi$soloslinearint, list(envi$TrNumber), mean)[, -1],
  aggregate(envi$drain, list(envi$TrNumber), mean)[, -1],
  aggregate(envi$drain, list(envi$TrNumber), mean)[, -1],
  aggregate(envi$drain, list(envi$TrNumber), mean)[, -1]
)

colnames(statsminmax) <-
  c(
    "transect",
    "min_topo" ,
    "max_topo",
    "mean_topo",
    "min_hand",
    "max_hand" ,
    "mean_hand",
    "min_cation",
    "max_cation" ,
    "mean_cation",
    "min_slope",
    "max_slope" ,
    "mean_slope",
    "min_srtm",
    "max_srtm" ,
    "mean_srtm",
    "min_soloint",
    "max_soloint" ,
    "mean_soloint",
    "min_drain",
    "max_drain",
    "mean_drain"
  )


table1 <-
  matrix(data = NA, nrow = 3, ncol = 7) # creat the table
rownames(table1) <-
  c("Ica formation" , "Solimoes formation", "River terraces")
colnames(table1) <-
  c(
    "Field Topography" ,
    "Soil Moisture (HAND)",
    "Soil Fertility (Cation concentration)",
    "Slope",
    "SRTM",
    "Cation concentration (interpolated values)",
    "SDO"
  )


for (i in 1:3) {
  table1[i, 1] <-
    paste(round(mean(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                         0), "mean_topo"]  , na.rm = TRUE), 2),
          "(", round(min(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "min_topo"], na.rm = TRUE), 2),
          "-", round(max(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "max_topo"], na.rm = TRUE), 2), ")")
  
  table1[i, 2] <-
    paste(round(mean(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                         0), "mean_hand"]   , na.rm = TRUE), 2),
          "(", round(min(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "min_hand"], na.rm = TRUE), 2),
          "-", round(max(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "max_hand"], na.rm = TRUE), 2), ")")
  
  table1[i, 3] <-
    paste(round(mean(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                         0), "mean_cation"]   , na.rm = TRUE), 2),
          "(", round(min(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "min_cation"], na.rm = TRUE), 2),
          "-", round(max(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "max_cation"], na.rm = TRUE), 2), ")")
  
  table1[i, 4] <-
    paste(round(mean(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                         0), "mean_slope"]   , na.rm = TRUE), 2),
          "(", round(min(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "min_slope"], na.rm = TRUE), 2),
          "-", round(max(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "max_slope"], na.rm = TRUE), 2), ")")
  
  table1[i, 5] <-
    paste(round(mean(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                         0), "mean_srtm"]   , na.rm = TRUE), 2),
          "(", round(min(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "min_srtm"], na.rm = TRUE), 2),
          "-", round(max(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "max_srtm"], na.rm = TRUE), 2), ")")
  
  table1[i, 6] <-
    paste(round(mean(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                         0), "mean_soloint"]   , na.rm = TRUE), 2),
          "(", round(min(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "min_soloint"], na.rm = TRUE), 2),
          "-", round(max(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "max_soloint"], na.rm = TRUE), 2), ")")
  table1[i, 7] <-
    paste(round(mean(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                         0), "mean_drain"]   , na.rm = TRUE), 2),
          "(", round(min(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "min_drain"], na.rm = TRUE), 2),
          "-", round(max(statsminmax[which(match(statsminmax$transect, geolist[[i]]) >
                                             0), "max_drain"], na.rm = TRUE), 2), ")")
}
print(table1)

max(subset(envi, envi$surface=="River terraces")$drain)

setwd("C:/Users/gabri/Dropbox/papers/projetos/JuruaHydropaper/hidrologia do jurua/Analyses")
#setwd("C:/workspace_Gabriel_Moulatlet/Hidrologia do jurua/Analyses")
#setwd("F:/workspace gabriel/Hidrologia do jurua/Analyses")

write.csv(table1, "RESUtable2.csv", row.names = TRUE)

#end of table 1

############################################################  calculate differences wihin transects ####

# first create a table with the differences
# then create a dicionary that contains the order of topogaphic differences

statsminmaxdiff <- data.frame(
  statsminmax$transect,
  statsminmax$max_topo - statsminmax$min_topo,
  statsminmax$max_hand - statsminmax$min_hand
)
colnames(statsminmaxdiff) <-
  c("transect", "diff_topo", "diff_hand")
statsminmaxdifford <-
  statsminmaxdiff[order(statsminmaxdiff$diff_topo, decreasing = TRUE), ]

dici_topodiff <-
  data.frame(statsminmaxdifford$transect, statsminmaxdifford$diff_topo)
colnames(dici_topodiff) <- c("TrNumber", "topo")
dici_topodiff$topodifford <-
  as.numeric(seq(1:length(dici_topodiff[, 1])))

# end of table diff within transects

# importing species data and prepare a list with envi of each species group ####

# import species data
# these species tables were generated in a script called "script_preparacao_sp_analises.R"
# the original files are in the folder "dados floristicos originais"

#setwd("C:/workspace_Gabriel_Moulatlet/Hidrologia do jurua/Analyses")
#setwd("C:/Users/gabri/Dropbox/hidrologia do jurua/Analyses")
#setwd("D:/hidrologia do jurua/Analyses")
setwd("C:/Users/gabri/Dropbox/papers/projetos/JuruaHydropaper/hidrologia do jurua/Analyses")

fern25 <-
  read.csv("ferns25_widetableWE.csv"     , stringsAsFactors = FALSE)
fern25 <-
  fern25[-which(rowSums(fern25[, -c(1:2)]) == "0"), ]  # delete subunits with zero occurrences
fern25 <- fern25[fern25$TrNumber %in% trvector, ]
head(fern25)



zing25 <-
  read.csv("zingdata_wide_gmm_v1.csv"    , stringsAsFactors = FALSE)
zing25 <- zing25[zing25$TrNumber %in% trvector, ]
colnames(zing25)


palm25 <-
  read.csv("palms_jurua_subunit_gmm1.csv", stringsAsFactors = FALSE) # no need to delete rows for the palms: checked before
palm25 <- palm25[palm25$TrNumber %in% trvector, ]

melas25 <-
  read.csv("Mel_Jurua_5x25m_table_gmm.csv", stringsAsFactors = FALSE)
melas25 <-
  melas25[melas25$TrNumber %in% trvector, ]
temp <- melas25[, -c(1:2)]
which(rowSums(temp) != 0)
melas25 <- melas25[which(rowSums(temp) != 0), ]

colSums(melas25)


# creat a list of the species data to GLMMS
species25list <- list(fern25, zing25, palm25, melas25)
names(species25list) <-
  c("Ferns", "Zingiberales", "Arecaceae", "Melastomataceae")



#how many species?
length(fern25[, -c(1:2)])
length(zing25[, -c(1:2)])
length(palm25[, -c(1:2)])
length(melas25[, -c(1:2)])

# join all species into a single dataframe

join1 <-
  join(
    fern25,
    zing25 ,
    by = c("TrNumber", "subunit"),
    type = "inner",
    match = "all"
  )
join2 <-
  join(
    join1 ,
    palm25 ,
    by = c("TrNumber", "subunit"),
    type = "inner",
    match = "all"
  )
join3 <-
  join(
    join2 ,
    melas25,
    by = c("TrNumber", "subunit"),
    type = "inner",
    match = "all"
  )

speciesall <- join3
speciesall_tomodel <- speciesall[, -c(1:2)]
speciesall_tomodel_pa  <-
  decostand(speciesall_tomodel, method = "pa",   1)   #to transform to PA

# join species and envi in a dataframe

speciesenvi <-
  join(
    speciesall,
    envi,
    by = c("TrNumber", "subunit"),
    type = "inner",
    match = "all"
  )



# call the environmental data
# each plant object has a different number of rows. It has to be adequated in the environmental data: use the join::plyr
# calculate species optima and toleraces to the HAND gradient

listrelaabutotal <- list() #only abu
listpatotal      <- list() #only pa
listspENVI       <- list() #join abu and envi
listspENVIpa     <- list() #join pa  and envi


for (i in seq(length(species25list))) {
  sprela <-
    decostand(species25list[[i]][-c(1:2)], method = "total", 1)   #to calculate relative abundances
  sppa   <-
    decostand(species25list[[i]][-c(1:2)], method = "pa",   1)   #to transform to PA
  
  listrelaabutotal[[i]] <- sprela
  listpatotal[[i]]      <- vegdist(sppa, method = "bray")
  listspENVI[[i]]       <-
    join(
      species25list[[i]],
      envi,
      by = c("TrNumber", "subunit"),
      type = "left",
      match = "all"
    ) # and merge with envi
  listspENVIpa[[i]]     <-
    join(
      cbind(species25list[[i]][c(1:2)], sppa),
      envi,
      by = c("TrNumber", "subunit"),
      type = "left",
      match = "all"
    ) # and merge with envi
}

#end of species importing and envi matching


# Run ordinations e prepare the table for the analysis #####


# run the NMDS ordinations
# first calculate the relative abundances
# then run the NMDS and store the first 2 axis of each plant group in a separate list

listnmdsab <- list()
listnmdspa <- list()

for (i in seq(length(species25list))) {
  dist.ab <-
    vegdist(decostand(species25list[[i]][-c(1:2)], method = "total", 1), method = "bray")
  mds.ab  <-
    monoMDS(
      stepacross(dist.ab),
      y = cmdscale(dist.ab, k = 2),
      k = 2,
      model = "global",
      threshold = 0.8,
      maxit = 200,
      weakties = TRUE,
      stress = 1,
      scaling = TRUE,
      pc = TRUE,
      smin = 1e-4,
      sfgrmin = 1e-7,
      sratmax = 0.99999
    )
  temp <-
    cbind(species25list[[i]][c(1:2)], scores(mds.ab)[, 1:2])
  listnmdsab[[i]] <- temp
  
  dist.pa <-
    vegdist(decostand(species25list[[i]][-c(1:2)], method = "pa", 1), method = "bray")
  mds.pa  <-
    monoMDS(
      stepacross(dist.pa),
      y = cmdscale(dist.pa, k = 2),
      k = 2,
      model = "global",
      threshold = 0.8,
      maxit = 200,
      weakties = TRUE,
      stress = 1,
      scaling = TRUE,
      pc = TRUE,
      smin = 1e-4,
      sfgrmin = 1e-7,
      sratmax = 0.99999
    )
  temp <-
    cbind(species25list[[i]][c(1:2)], scores(mds.pa)[, 1:2])
  listnmdspa[[i]] <-  temp
}

#join ENVI and List of NMDS


listNMDSenviab <- list()
listNMDSenvipa <- list()

for (i in seq(length(listnmdsab))) {
  listNMDSenviab[[i]] <-
    join(
      listnmdsab[[i]],
      envi,
      by = c("TrNumber", "subunit"),
      type = "left",
      match = "all"
    )
  listNMDSenvipa[[i]] <-
    join(
      listnmdspa[[i]],
      envi,
      by = c("TrNumber", "subunit"),
      type = "left",
      match = "all"
    )
}

listNMDSenviab[[1]]$group <-
  rep("Pteridophyte", length(listNMDSenviab[[1]][, 1]))
listNMDSenviab[[2]]$group <-
  rep("Zingiberales" , length(listNMDSenviab[[2]][, 1]))
listNMDSenviab[[3]]$group <-
  rep("Palms"    , length(listNMDSenviab[[3]][, 1]))
listNMDSenviab[[4]]$group <-
  rep("Melastomataceae", length(listNMDSenviab[[4]][, 1]))

listNMDSenvipa[[1]]$group <-
  rep("Pteridophyte", length(listNMDSenvipa[[1]][, 1]))
listNMDSenvipa[[2]]$group <-
  rep("Zingiberales" , length(listNMDSenvipa[[2]][, 1]))
listNMDSenvipa[[3]]$group <-
  rep("Palms"    , length(listNMDSenvipa[[3]][, 1]))
listNMDSenvipa[[4]]$group <-
  rep("Melastomataceae", length(listNMDSenvipa[[4]][, 1]))


#put the dataframes together instead of having as a list

unlistlistNMDSenviab <-
  dplyr::bind_rows(listNMDSenviab[[1]],
                   listNMDSenviab[[2]],
                   listNMDSenviab[[3]],
                   listNMDSenviab[[4]])
unlistlistNMDSenvipa <-
  dplyr::bind_rows(listNMDSenvipa[[1]],
                   listNMDSenvipa[[2]],
                   listNMDSenvipa[[3]],
                   listNMDSenvipa[[4]])


#prepare ENVI for join here - the name of the variables will appear in the graph of the regression trees
#LISTS for the REGRESSION TREES
envi2 <- envi
colnames(envi2) <-
  c(
    "TrNumber" ,
    "subunit",
    "LOI",
    "pH",
    "Ca",
    "K",
    "Mg",
    "Na",
    "sum_of_basis",
    "Al",
    "P",
    "surface",
    "topo",
    "lon",
    "lat",
    "HAND",
    "area_c",
    "Slope",
    "Drainage",
    "max_drain",
    "SCC",
    "solostopoint",
    "srtm_alt",
    "Truni"
  )

listNMDSenviab_t <- list()
listNMDSenvipa_t <- list()

for (i in seq(length(listnmdsab))) {
  listNMDSenviab_t[[i]] <-
    join(
      listnmdsab[[i]],
      envi2,
      by = c("TrNumber", "subunit"),
      type = "left",
      match = "all"
    )
  listNMDSenvipa_t[[i]] <-
    join(
      listnmdspa[[i]],
      envi2,
      by = c("TrNumber", "subunit"),
      type = "left",
      match = "all"
    )
}

listNMDSenviab_t[[1]]$group <-
  rep("Pteridophyte", length(listNMDSenviab_t[[1]][, 1]))
listNMDSenviab_t[[2]]$group <-
  rep("Zingiberales" , length(listNMDSenviab_t[[2]][, 1]))
listNMDSenviab_t[[3]]$group <-
  rep("Palms"    , length(listNMDSenviab_t[[3]][, 1]))
listNMDSenviab_t[[4]]$group <-
  rep("Melastomataceae", length(listNMDSenviab_t[[4]][, 1]))

listNMDSenvipa_t[[1]]$group <-
  rep("Pteridophyte", length(listNMDSenvipa_t[[1]][, 1]))
listNMDSenvipa_t[[2]]$group <-
  rep("Zingiberales" , length(listNMDSenvipa_t[[2]][, 1]))
listNMDSenvipa_t[[3]]$group <-
  rep("Palms"    , length(listNMDSenvipa_t[[3]][, 1]))
listNMDSenvipa_t[[4]]$group <-
  rep("Melastomataceae", length(listNMDSenvipa_t[[4]][, 1]))




##################################################################  glm models #####
############### models ####

listNMDSmodelsPA <- list()
listNMDSmodelsPA2 <- list()
listAnovas <- list()
listAnovas2 <- list()
listhidro <- list()
listgraphicC <- list()
listgraphicC2 <- list()
#this one is to calculate the number os transects and subunits used in each nmds models analysis

for (i in seq(listNMDSenvipa)) {
  hidro <-
    listNMDSenvipa[[i]][which(listNMDSenvipa[[i]][, "hand"] != "NA"), ]
  #hidro$hand <- log(1+hidro$hand)
  hidro$soloslinearint <- log(hidro$soloslinearint)
  toscale <-
    c("hand",
      "decli",
      "drain", "area_c",
      "soloslinearint",
      "solostopoint",
      "srtm_alt", "topo")
  hidro[, toscale] <- scale(hidro[, toscale])
  hidro$surface = as.factor(hidro$surface)
  
  listhidro[[i]] <- hidro
  
  # no final, essa é a parte que acabou indo pro paper
  # fazer isso pra cada group de plant, manuamente
  
  # pra helechos o modelo final é HAND + decli
  # para zingiberales o modelo final é HAND
  cglmfull <- lmer(MDS1 ~ hand + decli + drain+ (1|TrNumber),
                   data = hidro,
                   na.action = na.pass)
  cglmtopo <- lmer(MDS1 ~ topo + (1|TrNumber),
                   data = hidro,
                   na.action = na.pass)    
  
  dredge(cglmfull)
  dredge(cglmtopo)
                   
  # pra helechos o modelo final é só com HAND
  cglmfull2 <- lmer(MDS2 ~ hand +decli+drain +(1|TrNumber), 
                   data = hidro,
                   na.action = na.pass)
  cglmtopo2 <- lmer(MDS2 ~ topo + (1|TrNumber),
                   data = hidro,
                   na.action = na.pass)  
  
  dredge(cglmfull2)
  dredge(cglmtopo2)

  
  ############ até aqui ###################
  
  
  vif(cglmfull)
  cselection <- dredge(cglmfull)
  
  
  if (length(which(cselection$delta < 2)) > 1) {
    C.ests <-
      model.avg(cselection,
                subset = delta < 2 | delta == 0,
                revised.var = TRUE)
    summarymselection <- summary(C.ests)
    coeftable <- summarymselection$coefmat.subset[,c(1,2,5)] # selecionar apenas coeficientes "estimate", "SE" e "P"
    #r2 <- pR2(cglmfull)[6]
    #r.squaredGLMM(cglmfull)
    modelName <- unique(hidro$group)
    #coeftable <-
    #  as.data.frame(cbind(coeftable, rep(r2, length(coeftable[, 1])), rep(modelName, length(coeftable[, 1]))))
    coeftable <-
      as.data.frame(cbind(coeftable, rep(modelName, length(coeftable[, 1]))))
    #names(coeftable)[6] <- "R2"
    #names(coeftable)[7] <- "modelName"
    names(coeftable)[4] <- "modelName"
    coeftable$Variable <- rownames(coeftable)
    model <- formula()
    
  } else {
    coeftable <- summary(get.models(cselection, 1)[[1]])$coefficients[,c(1,2,5)] # selecionar apenas coeficientes "estimate", "SE" e "P"
    #r2 <- pR2(cglmfull)[6]
    
    modelName <- unique(hidro$group)
    #coeftable <-
    #  as.data.frame(cbind(coeftable, rep(r2, length(coeftable[, 1])), rep(modelName, length(coeftable[, 1]))))
    coeftable <-
      as.data.frame(cbind(coeftable, rep(modelName, length(coeftable[, 1]))))
    #names(coeftable)[5] <- "R2"
    #names(coeftable)[6] <- "modelName"
    names(coeftable)[4] <- "modelName"
    coeftable$Variable <- rownames(coeftable)
  }
  
  
  cglmfull2 <- lmer(MDS2 ~ hand + decli + drain + (1|TrNumber),
                    data = hidro,
                    na.action = na.pass)
  
  
  
  vif(cglmfull2)
  cselection2 <- dredge(cglmfull2,m.min = 1)
  summary(cglmfull2)
  
  
  if (length(which(cselection2$delta < 2)) > 1) {
    C.ests2 <-
      model.avg(cselection2,
                subset = delta < 2 | delta == 0,
                revised.var = TRUE)
    summarymselection <- summary(C.ests2)
    coeftable2 <- summarymselection$coefmat.subset[,c(1,2,5)]
    #r2 <- pR2(cglmfull2)[6]
    modelName <- unique(hidro$group)
    #coeftable2 <-
    #  as.data.frame(cbind(coeftable2, rep(r2, length(coeftable2[, 1])), rep(modelName, length(coeftable2[, 1]))))
    coeftable2 <-
      as.data.frame(cbind(coeftable2, rep(modelName, length(coeftable2[, 1]))))
    #names(coeftable2)[6] <- "R2"
    #names(coeftable2)[7] <- "modelName"
    names(coeftable2)[4] <- "modelName"
    coeftable2$Variable <- rownames(coeftable2)
    
  } else {
    coeftable2 <- summary(get.models(cselection2, 1)[[1]])$coefficients[,c(1,2,5)]
    #r2 <- pR2(cglmfull2)[6]
    modelName <- unique(hidro$group)
    #coeftable2 <-
    #  as.data.frame(cbind(coeftable2, rep(r2, length(coeftable2[, 1])), rep(modelName, length(coeftable2[, 1]))))
    coeftable2 <-
      as.data.frame(cbind(coeftable2, rep(modelName, length(coeftable2[, 1]) )))
    #names(coeftable2)[5] <- "R2"
    #names(coeftable2)[6] <- "modelName"
    names(coeftable2)[4] <- "modelName"
    coeftable2$Variable <- rownames(coeftable2)
  }
  
  listNMDSmodelsPA[[i]]  <- coeftable
  listNMDSmodelsPA2[[i]] <- coeftable2
  
}


toplotCmodels1 <- ldply(listNMDSmodelsPA, data.frame)
toplotCmodels1= unite(toplotCmodels1,p,c("Pr...z..","Pr...t.."))
toplotCmodels1$p =gsub("NA_", "",toplotCmodels1$p)
toplotCmodels1$p =gsub("_NA", "",toplotCmodels1$p)

toplotCmodels2 <- ldply(listNMDSmodelsPA2, data.frame)
toplotCmodels2= unite(toplotCmodels2,p,c("Pr...z..","Pr...t.."))
toplotCmodels2$p =gsub("NA_", "",toplotCmodels2$p)
toplotCmodels2$p =gsub("_NA", "",toplotCmodels2$p)

names(toplotCmodels1)[1:3] <-
  c("Coefficient", "SE", "p")
names(toplotCmodels2)[1:3] <-
  c("Coefficient", "SE", "p")

toplotCmodels1[, 1:3] <-
  apply(toplotCmodels1[, 1:3], 2, function(x)
    as.numeric(as.character(x)))
toplotCmodels1[, 1:3] <- round(toplotCmodels1[, 1:3], 2)

toplotCmodels2[, 1:3] <-
  apply(toplotCmodels2[, 1:3], 2, function(x)
    as.numeric(as.character(x)))
toplotCmodels2[, 1:3] <- round(toplotCmodels2[, 1:3], 2)

toplotCmodels1$Variable <-
  revalue(toplotCmodels1$Variable,
          c(
            "decli" = "Slope",
            "drain" = "SDO",
            "hand" = "HAND"
          ))
toplotCmodels1$axis = rep("NMDS1", length(toplotCmodels1[,1]))

toplotCmodels2$Variable <-
  revalue(toplotCmodels2$Variable,
          c(
            "decli" = "Slope",
            "drain" = "SDO",
            "hand" = "HAND"
          ))

toplotCmodels2$axis = rep("NMDS2", length(toplotCmodels2[,1]))

result_C = rbind(toplotCmodels1,toplotCmodels2)

#setwd("C:/Users/gabri/Dropbox/hidrologia do jurua/Analyses")
setwd("C:/Users/gabri/Dropbox/papers/projetos/JuruaHydropaper/hidrologia do jurua/Analyses")
write.csv(toplotCmodels1, "RESU_gLM_NMDS1_v12_03_22.csv", row.names = TRUE)
write.csv(toplotCmodels2, "RESU_gLM_NMDS2_v12_03_22.csv", row.names = TRUE)

#### coefplots ######
subset(result_C, result_C$p < 0.05)

cp1 =ggplot(subset(result_C,Variable!="(Intercept)"), aes( y = factor(Variable),
                                                           x = Coefficient,shape=factor(modelName)))+
  geom_pointrange(aes(xmin = Coefficient - SE, xmax = Coefficient + SE),size = 1.5,
                  position = position_dodge(width = 0.7),color="grey30") +
  theme_bw()+
  #coord_flip()+
  ylab("")+
  facet_wrap(~axis)+
  geom_vline(xintercept = 0,linetype="dashed")+
  theme(legend.position = "bottom") + theme(legend.title = element_blank(),
                                            legend.text = element_text(size=18)) +
  
  theme(panel.border = element_rect(fill = NA, colour = "black"),
        panel.grid.minor = element_blank(),panel.grid.major = element_blank())+
  guides(fill = guide_legend(nrow = 2))+
  theme(axis.text.y = element_text(size = 14))+
  theme(axis.text.x =  element_text(size=14),axis.title.x = element_text(size=18))+
  scale_x_continuous(limits = c(-0.15,0.1))+
  scale_shape_manual(values = c(15,16,17,18))+
  
  #scale_color_grey()+
  #scale_color_viridis_d(option="plasma")+
  theme(strip.text = element_text(size=20),
        strip.background = element_rect(fill="white",linetype="blank"))+
  labs(x="Standardized slope coefficient")
cp1

jpeg("coefplot_v3_v12_03_22.jpeg",units = "cm", width=25, height = 15, res = 180)
cp1
dev.off()

##### correlations #####

colnames(envi)
envi$topo

# HAND x TOPO
ggplot(subset(envi, !is.na(envi$topo)), aes(hand,topo))+
  geom_point()+
  geom_smooth(method="lm")+
  xlab("HAND (m)")+
  ylab("Field measured topography (m)")+
  facet_wrap(.~surface,scale="free")+
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_blank(),
        text = element_text(size=16))+
  theme(legend.title=element_blank())+
  theme(panel.border = element_rect(fill = NA, colour = "black"))


a= ggplot(subset(envi, !is.na(envi$topo)), aes(y=topo,x=log(sum_of_basis) ))+
  geom_point()+
  facet_wrap(.~surface,scale="free")+
  geom_smooth(method="lm")+
  ylab("Field measured topography (m)")+
  xlab("Soil cation concentration (cmol/kg)")+
  facet_wrap(.~surface,scale="free")+
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_blank(),
        text = element_text(size=16))+
  theme(legend.title=element_blank())+
  theme(panel.border = element_rect(fill = NA, colour = "black"))

b= ggplot(subset(envi, !is.na(envi$hand)), aes(y=hand,x=log(sum_of_basis) ))+
  geom_point()+
  facet_wrap(.~surface,scale="free")+
  geom_smooth(method="lm")+
  ylab("HAND (m)")+
  xlab("Soil cation concentration (cmol/kg)")+
  facet_wrap(.~surface,scale="free")+
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_blank(),
        text = element_text(size=16))+
  theme(legend.title=element_blank())+
  theme(panel.border = element_rect(fill = NA, colour = "black"))

a/b

aa= ggplot(subset(envi, !is.na(envi$hand)), aes(y=hand,x=decli ))+
  geom_point()+
  #facet_wrap(.~surface,scale="free")+
  #geom_smooth(method="lm")+
  labs(subtitle = "Pearson's R = 0.32")+
  ylab("HAND (m)")+
  xlab("Slope (m)")+
  #facet_wrap(.~surface,scale="free")+
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_blank(),
        text = element_text(size=16))+
  theme(legend.title=element_blank())+
  theme(panel.border = element_rect(fill = NA, colour = "black"))
aa

a=subset(envi, !is.na(envi$hand))
cor(a$hand,a$decli)

b= ggplot(subset(envi, !is.na(envi$hand)), aes(y=hand,x=drain ))+
  geom_point()+
  #facet_wrap(.~surface,scale="free")+
  #geom_smooth(method="lm")+
  labs(subtitle = "Pearson's R = 0.13")+
  ylab("HAND (m)")+
  xlab("Strahler's order (m)")+
  #facet_wrap(.~surface,scale="free")+
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_blank(),
        text = element_text(size=16))+
  theme(legend.title=element_blank())+
  theme(panel.border = element_rect(fill = NA, colour = "black"))
b

a=subset(envi, !is.na(envi$hand))
cor(a$hand,a$drain)

c= ggplot(subset(envi, !is.na(envi$hand)), aes(y=decli,x=drain ))+
  geom_point()+
  #facet_wrap(.~surface,scale="free")+
  #geom_smooth(method="lm")+
  labs(subtitle = "Pearson's R = 0.06")+
  ylab("Slope (m)")+
  xlab("Strahler's order (m)")+
  #facet_wrap(.~surface,scale="free")+
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_blank(),
        text = element_text(size=16))+
  theme(legend.title=element_blank())+
  theme(panel.border = element_rect(fill = NA, colour = "black"))
c

a=subset(envi, !is.na(envi$hand))
cor(a$decli,a$drain)

aa+b+c
